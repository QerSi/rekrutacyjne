unit Zamowienie;

interface
uses
Data.DB,UData,dialogs,Pozycja;

type
  TZamowienie = class

  public
   Data_zamowienia : string;
   idzamowienia : Integer;
   idprodukty : Integer;
   iduzytkownicy: Integer;
   idstatusy: Integer;
   numer_zamowienia : Integer;
   pozycje : array of TPozycja;




  constructor Create(Data_zamowienia : string; idzamowienia: Integer; idprodukty: Integer; iduzytkownicy:Integer; idstatusy: integer; numer_zamowienia:Integer); overload;
  procedure Insert(Poz : TPozycja);
  procedure Update;
  procedure Delete;
  procedure DodajPozycje(Poz : TPozycja);
  procedure UsunPozycje(Id: Integer);

end;

implementation
constructor TZamowienie.Create(Data_zamowienia : string; idzamowienia: Integer; idprodukty: Integer; iduzytkownicy:Integer; idstatusy: integer; numer_zamowienia:Integer);
begin
   Self.Data_zamowienia := Data_zamowienia;
   Self.idzamowienia := idzamowienia;
   Self.idprodukty := idprodukty;
   Self.iduzytkownicy := iduzytkownicy;
   Self.idstatusy := idstatusy;
   Self.numer_zamowienia := numer_zamowienia;
end;


procedure TZamowienie.Update;
begin
  with DataModule1.zqryinsert, SQL do
  begin
      Close;
      Clear;
      Add('UPDATE zamowienia SET idstatusy=:idstat where numer_zamowienia=:num');
      ParamByName('idstat').AsInteger:=Self.idstatusy;
      ParamByName('num').AsInteger:=Self.numer_zamowienia;
      ExecSQL;
      Close;
  end;
end;

procedure TZamowienie.Delete;
begin
   with DataModule1.zqryinsert, SQL do
  begin
      Close;
      Clear;
      Add('Delete From zamowienia where numer_zamowienia=:numer');
      ParamByName('numer').AsInteger:=Self.numer_zamowienia;
      ExecSQL;
      Close;
  end;
end;

procedure TZamowienie.DodajPozycje(Poz : TPozycja);
var i : Integer;
    flaga : Boolean;
begin
  flaga:=True;
  for I := 0 to Length(Self.pozycje)-1 do
    begin
      flaga:=True;
      if (self.pozycje[i]<>nil) AND (self.pozycje[i].nazwa = Poz.nazwa) then
      begin
        flaga := False;
        Self.pozycje[i].iloœæ := Self.pozycje[i].iloœæ + 1;
        Break;
      end;
    end;

    if flaga then
    begin
      SetLength(Self.pozycje,Length(self.pozycje)+1);
      Self.pozycje[Length(self.pozycje)-1] := Poz;
    end;

end;

procedure TZamowienie.UsunPozycje(Id: Integer);
var i : Integer;
begin
  for I := 0 to Length(Self.pozycje)-1 do
  begin
    if self.pozycje[i].idpozycje = Id then
    begin
      if Self.pozycje[i].iloœæ>1 then
      begin
        try
          self.pozycje[i].DeleteNumer(self.numer_zamowienia);
          Self.pozycje[i].iloœæ := Self.pozycje[i].iloœæ -1;
          ShowMessage('Pozycja usuniêta');
          Break;
        except
          ShowMessage('Pozycja nie zosta³a usuniêta');
          Break;
        end;

      end
      else
      begin;
        try
         self.pozycje[i].DeleteNumer(self.numer_zamowienia);
         Self.pozycje[i].Free;
         ShowMessage('Pozycja usuniêta');
         Break;
        except
          ShowMessage('Pozycja nie zosta³a usuniêta');
          Break;
        end;
      end;
    end;
    
  end;
  DataModule1.zqryszczegoly.Refresh;
end;

procedure TZamowienie.Insert(Poz : TPozycja);
var i : Integer;
    flaga : Boolean;
begin
  flaga:=True;
  for I := 0 to Length(Self.pozycje)-1 do
    begin
      flaga:=True;
      if (self.pozycje[i]<>nil) AND (self.pozycje[i].nazwa = Poz.nazwa) then
      begin
        flaga := False;
        Self.pozycje[i].iloœæ := Self.pozycje[i].iloœæ + poz.iloœæ;
        self.pozycje[i].idpozycje := Poz.idpozycje;
        Self.pozycje[i].Insert(Self.iduzytkownicy,Self.idstatusy,Self.numer_zamowienia,Self.Data_zamowienia);
        ShowMessage('Pozycja dodana');
        Break;
      end;
    end;

    if flaga then
    begin

      Poz.Insert(Self.iduzytkownicy,Self.idstatusy,Self.numer_zamowienia,Self.Data_zamowienia);
      SetLength(Self.pozycje,Length(self.pozycje)+1);
      Self.pozycje[Length(self.pozycje)-1] := Poz;
      ShowMessage('Pozycja dodana');
    end;
    DataModule1.zqryszczegoly.Refresh;
end;
end.
